{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, LOGIN_SUCCESS } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/user/create\", userData).then(function (res) {\n      return history.push(\"/login-page\");\n    }) // re-direct to login on successful register\n    [\"catch\"](function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    return axios.post(\"/user/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      var user = res.data.user;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n      dispatch(setUser(user));\n    })[\"catch\"](function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var persistentUser = function persistentUser() {\n  return function (dispatch) {\n    actualToken = localStorage.getItem(\"jwtToken\");\n    var decoded = jwt_decode(actualToken);\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport var setUserLoading = function setUserLoading() {\n  return {\n    type: USER_LOADING\n  };\n}; // User loading\n\nexport var setUser = function setUser(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: user\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/home/nathalia/Documentos/Memento/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","LOGIN_SUCCESS","registerUser","userData","history","dispatch","post","then","res","push","err","type","payload","response","data","loginUser","token","user","localStorage","setItem","decoded","setCurrentUser","setUser","persistentUser","actualToken","getItem","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,EAIEC,aAJF,QAKO,SALP,C,CAQA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DV,IAAAA,KAAK,CACFW,IADH,CACQ,cADR,EACwBH,QADxB,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,aAAb,CAAJ;AAAA,KAFX,EAE4C;AAF5C,cAGS,UAAAC,GAAG;AAAA,aACRL,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAWP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAZ,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/C,WAAQV,KAAK,CACVW,IADK,CACA,aADA,EACeH,QADf,EAELI,IAFK,CAEA,UAAAC,GAAG,EAAI;AACX;AACA;AAFW,UAGHQ,KAHG,GAGOR,GAAG,CAACM,IAHX,CAGHE,KAHG;AAAA,UAIHC,IAJG,GAIMT,GAAG,CAACM,IAJV,CAIHG,IAJG;AAKXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EALW,CAMX;;AACApB,MAAAA,YAAY,CAACoB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMI,OAAO,GAAGvB,UAAU,CAACmB,KAAD,CAA1B,CATW,CAUX;;AACAX,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACAf,MAAAA,QAAQ,CAACiB,OAAO,CAACL,IAAD,CAAR,CAAR;AACD,KAfK,WAgBC,UAAAP,GAAG;AAAA,aACRL,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEb,UADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAhBJ,CAAR;AAuBD,GAxBgC;AAAA,CAA1B;AA0BP,OAAO,IAAMS,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO,UAAAlB,QAAQ,EAAI;AAC/CmB,IAAAA,WAAW,GAAGN,YAAY,CAACO,OAAb,CAAqB,UAArB,CAAd;AACA,QAAML,OAAO,GAAGvB,UAAU,CAAC2B,WAAD,CAA1B;AACD,GAH6B;AAAA,CAAvB,C,CAKP;;AACA,OAAO,IAAMH,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLT,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEQ;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO;AACLf,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,IAAMsB,OAAO,GAAG,SAAVA,OAAU,CAAAL,IAAI,EAAI;AAC7B,SAAO;AACLN,IAAAA,IAAI,EAAEV,aADD;AAELW,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,IAAMU,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAtB,QAAQ,EAAI;AAC1C;AACAa,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAhC,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING,\n  LOGIN_SUCCESS\n} from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/user/create\", userData)\n    .then(res => history.push(\"/login-page\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  return (axios\n    .post(\"/user/login\", userData)\n    .then(res => {\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      const { user } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n      dispatch(setUser(user));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    ));\n \n};\n\nexport const persistentUser = () =>  dispatch => {\n  actualToken = localStorage.getItem(\"jwtToken\");\n  const decoded = jwt_decode(actualToken);\n}\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// User loading\nexport const setUser = user => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: user\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}